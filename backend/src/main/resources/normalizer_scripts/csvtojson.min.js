// Source: http://www.bennadel.com/blog/1504-Ask-Ben-Parsing-CSV-Strings-With-Javascript-Exec-Regular-Expression-Command.htm
// This will parse a delimited string into an array of
// arrays. The default delimiter is the comma, but this
// can be overriden in the second argument.
// Example:
// const values = `1,2019/05/20 06:24:57,008401000523,SYSTEM,auth,0,2019/05/20 06:24:48,,auth-success,Vimeo-nyv-mfa.iac.corp,0,0,general,informational,"authenticated for user 'beberh'.   auth profile 'Vimeo-nyv-mfa.iac.corp', vsys 'vsys1', server profile 'nyv-mfa.iac.corp', server address '192.168.25.49', From: 67.82.39.171.",19746687,0x8000000000000000,0,0,0,0,,IAC-EAST-PA01 \n 1,2019/05/20 06:24:57,008401000523,SYSTEM,auth,0,2019/05/20 06:24:48,,auth-success,Vimeo-nyv-mfa.iac.corp,0,0,general,informational,"authenticated for user 'beberh'.   auth profile 'Vimeo-nyv-mfa.iac.corp', vsys 'vsys1', server profile 'nyv-mfa.iac.corp', server address '192.168.25.49', From: 67.82.39.171.",19746687,0x8000000000000000,0,0,0,0,,IAC-EAST-PA01`;
// const headers = `FUTURE_USE_1,receive_time,serial_number,firewall_log_type,subtype,FUTURE_USE_2,generated_date_and_time,virtual_system,event_id_name,object,FUTURE_USE_3,FUTURE_USE_4,module,severity,description,sequence_number,action_flags,device_group_hierarchy_level_1,device_group_hierarchy_level_2,device_group_hierarchy_level_3,device_group_hierarchy_level_4,virtual_system_name,device_name,Client_OS_version`
// const csv = `${headers}\n${values}`;
// const parsedCsv = csvtojson.parse(csv);

var csvtojson = (function () {

  function CSVToArray(strData, strDelimiter) {
    // Check to see if the delimiter is defined. If not,
    // then default to comma.
    strDelimiter = (strDelimiter || ",");
    // Create a regular expression to parse the CSV values.
    var objPattern = new RegExp((
      // Delimiters.
      "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
      // Quoted fields.
      "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
      // Standard fields.
      "([^\"\\" + strDelimiter + "\\r\\n]*))"), "gi");
    // Create an array to hold our data. Give the array
    // a default empty first row.
    var arrData = [[]];
    // Create an array to hold our individual pattern
    // matching groups.
    var arrMatches = null;
    // Keep looping over the regular expression matches
    // until we can no longer find a match.
    while (arrMatches = objPattern.exec(strData)) {
      // Get the delimiter that was found.
      var strMatchedDelimiter = arrMatches[1];
      // Check to see if the given delimiter has a length
      // (is not the start of string) and if it matches
      // field delimiter. If id does not, then we know
      // that this delimiter is a row delimiter.
      if (strMatchedDelimiter.length && (strMatchedDelimiter != strDelimiter)) {
        // Since we have reached a new row of data,
        // add an empty row to our data array.
        arrData.push([]);
      }
      // Now that we have our delimiter out of the way,
      // let's check to see which kind of value we
      // captured (quoted or unquoted).
      if (arrMatches[2]) {
        // We found a quoted value. When we capture
        // this value, unescape any double quotes.
        var strMatchedValue = arrMatches[2].replace(
          new RegExp("\"\"", "g"), "\"");
      } else {
        // We found a non-quoted value.
        var strMatchedValue = arrMatches[3];
      }
      // Now that we have our value string, let's add
      // it to the data array.
      arrData[arrData.length - 1].push(strMatchedValue);
    }
    // Return the parsed data.
    return (arrData);
  }

  function CSV2JSON(csv) {
    var array = CSVToArray(csv);
    var objArray = [];
    for (var i = 1; i < array.length; i++) {
      objArray[i - 1] = {};
      for (var k = 0; k < array[0].length && k < array[i].length; k++) {
        var key = array[0][k];
        objArray[i - 1][key] = array[i][k]
      }
    }

    var json = JSON.stringify(objArray);
    var str = json.replace(/},/g, "},\r\n");

    return str;
  }
  return {
    parse: CSV2JSON
  }
})()